{"version":3,"sources":["utils/lib.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["formatPrice","money","Math","abs","toString","replace","getShortString","longString","maxLength","length","substring","Card","products","map","product","index","furniture_style","key","className","name","price","description","style","delivery_time","App","useState","setProducts","setStyle","search","setSearch","useEffect","a","fetch","response","json","responseJson","furniture_styles","getFurniture","filterWithKeyword","filter","toLowerCase","indexOf","type","placeholder","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAaA,EAAc,SAAAC,GACzB,OAAOC,KAAKC,IAAIF,GACbG,WACAC,QAAQ,2BAA4B,QAG5BC,EAAiB,SAACC,EAAYC,GACzC,OAAID,EAAWE,OAASD,EACfD,EAAWG,UAAU,EAAGF,GAAa,MAErCD,G,MC+BII,MAnCf,YAA6B,IAAbC,EAAY,EAAZA,SACd,OACE,oCACGA,EAASC,KAAI,SAACC,EAASC,GAAW,IAC3BC,EAAoBF,EAApBE,gBAEN,OACE,yBAAKC,IAAG,kBAAaF,GAASG,UAAU,YACtC,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,+DACb,4BAAKJ,EAAQK,MACb,iCAAOnB,EAAYc,EAAQM,SAG7B,yBAAKF,UAAU,kCACb,2BAAIZ,EAAeQ,EAAQO,YAAa,OAG1C,yBAAKH,UAAU,4CACZF,EAAgBH,KAAI,SAACS,EAAOP,GAC3B,OAAO,uBAAGE,IAAG,oBAAeF,KAAWA,EAAQ,KAAO,IAAMO,OAIhE,yBAAKJ,UAAU,+BACb,2BAAIJ,EAAQS,cAAZ,gB,MC0BDC,MAnDf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNb,EADM,KACIc,EADJ,OAEaD,mBAAS,IAFtB,mBAECE,GAFD,aAGeF,mBAAS,IAHxB,mBAGNG,EAHM,KAGEC,EAHF,KAKbC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACuBC,MACnB,oDAFJ,cACMC,EADN,gBAI2BA,EAASC,OAJpC,OAIMC,EAJN,OAMET,EAAYS,EAAavB,UACzBe,EAASQ,EAAaC,kBAPxB,4CADc,uBAAC,WAAD,wBAWdC,KACC,IAEH,IAEMC,GAFqC,IAApB1B,EAASH,OAAeG,EAAW,IAEjB2B,QAAO,SAAAzB,GAC9C,OAAuD,IAAhDA,EAAQK,KAAKqB,cAAcC,QAAQb,MAG5C,OACE,oCACE,4BAAQV,UAAU,UAChB,yBAAKA,UAAU,aACb,8BACE,2BACEA,UAAU,iBACVwB,KAAK,OACLC,YAAY,iBACZC,SAAU,SAAAC,GAAC,OAAIhB,EAAUgB,EAAEC,OAAOC,aAM1C,0BAAM7B,UAAU,kBACd,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMN,SAAU0B,SCrCRU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.525630f7.chunk.js","sourcesContent":["export const formatPrice = money => {\n  return Math.abs(money)\n    .toString()\n    .replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1.\");\n};\n\nexport const getShortString = (longString, maxLength) => {\n  if (longString.length > maxLength) {\n    return longString.substring(0, maxLength) + \"...\";\n  } else {\n    return longString;\n  }\n};\n","import React from \"react\";\n\nimport { formatPrice, getShortString } from \"../../utils/lib\";\n\nimport \"./card.css\";\n\nfunction Card({ products }) {\n  return (\n    <>\n      {products.map((product, index) => {\n        let { furniture_style } = product;\n\n        return (\n          <div key={`product-${index}`} className=\"col-md-6\">\n            <div className=\"product--card\">\n              <div className=\"d-flex flex-row justify-content-between product--card-price\">\n                <h4>{product.name}</h4>\n                <p>Rp {formatPrice(product.price)}</p>\n              </div>\n\n              <div className=\"mt-2 product--card-description\">\n                <p>{getShortString(product.description, 114)}</p>\n              </div>\n\n              <div className=\"mt-2 d-flex flex-row product--card-style\">\n                {furniture_style.map((style, index) => {\n                  return <p key={`furniture-${index}`}>{(index ? \", \" : \"\") + style}</p>;\n                })}\n              </div>\n\n              <div className=\"mt-2 product--card-delivery\">\n                <p>{product.delivery_time} day</p>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </>\n  );\n}\n\nexport default Card;\n","import React, { useEffect, useState } from \"react\";\n\nimport Card from \"./components/Card\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [products, setProducts] = useState([]);\n  const [style, setStyle] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    async function getFurniture() {\n      let response = await fetch(\n        \"https://www.mocky.io/v2/5c9105cb330000112b649af8\"\n      );\n      let responseJson = await response.json();\n\n      setProducts(responseJson.products);\n      setStyle(responseJson.furniture_styles);\n    }\n\n    getFurniture();\n  }, []);\n\n  const prodcutNotNull = products.length !== 0 ? products : [];\n\n  const filterWithKeyword = prodcutNotNull.filter(product => {\n    return product.name.toLowerCase().indexOf(search) !== -1;\n  });\n\n  return (\n    <>\n      <header className=\"header\">\n        <div className=\"container\">\n          <form>\n            <input\n              className=\"header--search\"\n              type=\"text\"\n              placeholder=\"Cari Furniture\"\n              onChange={e => setSearch(e.target.value)}\n            />\n          </form>\n        </div>\n      </header>\n\n      <main className=\"list--products\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <Card products={filterWithKeyword} />\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}